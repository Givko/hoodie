openapi: "3.1.0"

info:
  title: Hoodie API Server
  summary: Private Chat Server Written in Go
  description: >
    The Hoodie API Server provides endpoints for user management and server initialization.
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: "0.1"

servers:
  - url: "{protocol}://{hostname}:{port}/api/{version}"
    description: Primary API Server
    variables:
      protocol:
        default: https
        enum:
          - http
          - https
      hostname:
        default: 127.0.0.1
        description: Server hostname or IP address
      port:
        default: "443"
        description: Server port number
      version:
        default: "0.1"
        enum: ["0.1"]
        description: API version

paths:
  /init:
    post:
      summary: Initialize Server
      description: Initialize the server and create an admin user.
      requestBody:
        required: true
        description: Admin user creation request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "201":
          description: The server has been initialized successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: A valid token has not been provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: The server has already been initialized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    get:
      summary: List All Users
      description: Retrieve a list of all registered users.
      responses:
        "200":
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Register a New User
      description: Create a new user account.
      requestBody:
        required: true
        description: User registration details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: User already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: ID of the user to operate on.
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Find a User by ID
      description: Retrieve a user's details by their ID.
      responses:
        "200":
          description: User found successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update an Existing User by ID
      description: Update user information for the specified user ID.
      requestBody:
        required: true
        description: User update details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete an Existing User by ID
      description: Remove a user from the system using their ID.
      responses:
        "204":
          description: User deleted successfully. No content.
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/login:
    post:
      summary: Log User Into the System
      description: Authenticate a user and establish a session.
      requestBody:
        required: true
        description: User login credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginRequest"
      responses:
        "200":
          description: User logged in successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid login credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/logout:
    get:
      summary: Log Out User
      description: Terminate the user's session.
      responses:
        "204":
          description: User logged out successfully. No content.
        "401":
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    UserCreateRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Unique username for the user.
          examples: 
            - johndoe
        password:
          type: string
          format: password
          description: User's password.
          examples:
            - StrongP@ssw0rd!
      description: Request payload for creating a new user.

    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          description: New username for the user.
          examples: 
            - johndoe_updated
        password:
          type: string
          format: password
          description: New password for the user.
          examples: 
            - NewStr0ngP@ss!
      description: Request payload for updating user information.

    UserLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username of the user.
          examples: 
            - johndoe
        password:
          type: string
          format: password
          description: Password of the user.
          examples:
            - StrongP@ssw0rd!
      description: Request payload for user login.

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user.
          examples:
            - 12345
        username:
          type: string
          description: Username of the user.
          examples:
            - johndoe
        isAdmin:
          type: boolean
          description: Indicates if the user has administrative privileges.
          examples:
            - false
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created.
          examples:
            - "2025-01-10T15:04:05Z"
        lastUpdatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated.
          examples:
            - "2025-01-11T12:30:45Z"
      description: Response payload containing user details.

    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code representing the type of error.
          examples:
            - USER_NOT_FOUND
        message:
          type: string
          description: Detailed message about the error.
          examples:
            - "The user with the given ID was not found."
      description: Standard error response.



